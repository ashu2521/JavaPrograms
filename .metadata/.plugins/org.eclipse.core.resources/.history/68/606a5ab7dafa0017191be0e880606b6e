package Algorithm;

import java.util.Scanner;

public class DP_CoinChange {
	static boolean OR(int x, int y) {
		if (x == 0 && y == 0)
			return false;
		else
			return true;
	}

	static long getWays(int n, int[] c) {
		// Complete this function
		long arr[][] = new long[c.length + 1][n + 1];
		for (int i = 0; i <= c.length; i++)
			arr[i][0] = 1;
		for (int i = 1; i <= c.length; i++) {
			for (int j = 1; j <= n; j++) {
				if (j == 0)
					arr[i][j] = 1;
				else {
					if (c[i - 1] > j)
						arr[i][j] = arr[i - 1][j];
					else
						arr[i][j] = arr[i - 1][j] + arr[i][j - c[i - 1]];
				}
			}
		}
		for (int i = 0; i <= c.length; i++) {
			for (int j = 0; j <= n; j++) {
				System.out.print(arr[i][j] + " ");
			}
			System.out.println("");
		}

		return 0;
	}

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		int m = in.nextInt();
		int[] c = new int[m];
		for (int c_i = 0; c_i < m; c_i++) {
			c[c_i] = in.nextInt();
		}
		// Print the number of ways of making change for 'n' units using coins
		// having the values given by 'c'
		long ways = getWays(n, c);
	}
}
